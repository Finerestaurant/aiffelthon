
Loading dataset...
batch_size = 128
learning rate = 0.0001
train_size = 65372
validation_size = 18677
test_size = 9340
Data load complete!
Initializing model....
Initialize complete!!
[3m                                      SampleCNN Summary                                       
┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃[1m path         [22m┃[1m outputs                 [22m┃[1m batch_stats        [22m┃[1m params                       [22m┃
┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩
│ Inputs       │ float32[128,48,1876]    │                    │                              │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_0  │ float32[128,46,625,128] │ mean: float32[128] │ bias: float32[128]           │
│              │                         │ var: float32[128]  │ scale: float32[128]          │
│              │                         │                    │                              │
│              │                         │ [1m256 (1.0 KB)[22m       │ [1m256 (1.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_1  │ float32[128,44,312,128] │ mean: float32[128] │ bias: float32[128]           │
│              │                         │ var: float32[128]  │ scale: float32[128]          │
│              │                         │                    │                              │
│              │                         │ [1m256 (1.0 KB)[22m       │ [1m256 (1.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_10 │ float32[128,6,95,64]    │ mean: float32[64]  │ bias: float32[64]            │
│              │                         │ var: float32[64]   │ scale: float32[64]           │
│              │                         │                    │                              │
│              │                         │ [1m128 (512 B)[22m        │ [1m128 (512 B)[22m                  │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_2  │ float32[128,42,310,128] │ mean: float32[128] │ bias: float32[128]           │
│              │                         │ var: float32[128]  │ scale: float32[128]          │
│              │                         │                    │                              │
│              │                         │ [1m256 (1.0 KB)[22m       │ [1m256 (1.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_3  │ float32[128,12,101,256] │ mean: float32[256] │ bias: float32[256]           │
│              │                         │ var: float32[256]  │ scale: float32[256]          │
│              │                         │                    │                              │
│              │                         │ [1m512 (2.0 KB)[22m       │ [1m512 (2.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_4  │ float32[128,10,99,256]  │ mean: float32[256] │ bias: float32[256]           │
│              │                         │ var: float32[256]  │ scale: float32[256]          │
│              │                         │                    │                              │
│              │                         │ [1m512 (2.0 KB)[22m       │ [1m512 (2.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_5  │ float32[128,10,99,256]  │ mean: float32[256] │ bias: float32[256]           │
│              │                         │ var: float32[256]  │ scale: float32[256]          │
│              │                         │                    │                              │
│              │                         │ [1m512 (2.0 KB)[22m       │ [1m512 (2.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_6  │ float32[128,10,99,512]  │ mean: float32[512] │ bias: float32[512]           │
│              │                         │ var: float32[512]  │ scale: float32[512]          │
│              │                         │                    │                              │
│              │                         │ [1m1,024 (4.1 KB)[22m     │ [1m1,024 (4.1 KB)[22m               │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_7  │ float32[128,10,99,256]  │ mean: float32[256] │ bias: float32[256]           │
│              │                         │ var: float32[256]  │ scale: float32[256]          │
│              │                         │                    │                              │
│              │                         │ [1m512 (2.0 KB)[22m       │ [1m512 (2.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_8  │ float32[128,10,99,128]  │ mean: float32[128] │ bias: float32[128]           │
│              │                         │ var: float32[128]  │ scale: float32[128]          │
│              │                         │                    │                              │
│              │                         │ [1m256 (1.0 KB)[22m       │ [1m256 (1.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ BatchNorm_9  │ float32[128,8,97,128]   │ mean: float32[128] │ bias: float32[128]           │
│              │                         │ var: float32[128]  │ scale: float32[128]          │
│              │                         │                    │                              │
│              │                         │ [1m256 (1.0 KB)[22m       │ [1m256 (1.0 KB)[22m                 │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_0       │ float32[128,46,625,128] │                    │ bias: float32[128]           │
│              │                         │                    │ kernel: float32[3,3,1,128]   │
│              │                         │                    │                              │
│              │                         │                    │ [1m1,280 (5.1 KB)[22m               │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_1       │ float32[128,44,312,128] │                    │ bias: float32[128]           │
│              │                         │                    │ kernel: float32[3,3,128,128] │
│              │                         │                    │                              │
│              │                         │                    │ [1m147,584 (590.3 KB)[22m           │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_10      │ float32[128,6,95,64]    │                    │ bias: float32[64]            │
│              │                         │                    │ kernel: float32[3,3,128,64]  │
│              │                         │                    │                              │
│              │                         │                    │ [1m73,792 (295.2 KB)[22m            │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_2       │ float32[128,42,310,128] │                    │ bias: float32[128]           │
│              │                         │                    │ kernel: float32[3,3,128,128] │
│              │                         │                    │                              │
│              │                         │                    │ [1m147,584 (590.3 KB)[22m           │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_3       │ float32[128,12,101,256] │                    │ bias: float32[256]           │
│              │                         │                    │ kernel: float32[3,3,128,256] │
│              │                         │                    │                              │
│              │                         │                    │ [1m295,168 (1.2 MB)[22m             │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_4       │ float32[128,10,99,256]  │                    │ bias: float32[256]           │
│              │                         │                    │ kernel: float32[3,3,256,256] │
│              │                         │                    │                              │
│              │                         │                    │ [1m590,080 (2.4 MB)[22m             │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_5       │ float32[128,10,99,256]  │                    │ bias: float32[256]           │
│              │                         │                    │ kernel: float32[3,3,256,256] │
│              │                         │                    │                              │
│              │                         │                    │ [1m590,080 (2.4 MB)[22m             │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_6       │ float32[128,10,99,512]  │                    │ bias: float32[512]           │
│              │                         │                    │ kernel: float32[3,3,256,512] │
│              │                         │                    │                              │
│              │                         │                    │ [1m1,180,160 (4.7 MB)[22m           │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_7       │ float32[128,10,99,256]  │                    │ bias: float32[256]           │
│              │                         │                    │ kernel: float32[3,3,512,256] │
│              │                         │                    │                              │
│              │                         │                    │ [1m1,179,904 (4.7 MB)[22m           │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_8       │ float32[128,10,99,128]  │                    │ bias: float32[128]           │
│              │                         │                    │ kernel: float32[3,3,256,128] │
│              │                         │                    │                              │
│              │                         │                    │ [1m295,040 (1.2 MB)[22m             │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Conv_9       │ float32[128,8,97,128]   │                    │ bias: float32[128]           │
│              │                         │                    │ kernel: float32[3,3,128,128] │
│              │                         │                    │                              │
│              │                         │                    │ [1m147,584 (590.3 KB)[22m           │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Dense_0      │ float32[128,30]         │                    │ bias: float32[30]            │
│              │                         │                    │ kernel: float32[36480,30]    │
│              │                         │                    │                              │
│              │                         │                    │ [1m1,094,430 (4.4 MB)[22m           │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Dropout_0    │ float32[128,10,99,512]  │                    │                              │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ Dropout_1    │ float32[128,6,95,64]    │                    │                              │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│ SampleCNN    │ float32[128,30]         │                    │                              │
├──────────────┼─────────────────────────┼────────────────────┼──────────────────────────────┤
│[1m              [22m│[1m                   Total [22m│[1m 4,480 (17.9 KB)    [22m│[1m 5,747,166 (23.0 MB)          [22m│
└──────────────┴─────────────────────────┴────────────────────┴──────────────────────────────┘
[1m                                                                                              
[1m                            Total Parameters: 5,751,646 (23.0 MB)                             
Epoch 1






































































epoch 1 - train average loss : 2.4385716915130615 - train accuracy : 0.26953157782554626 validation average loss : 2.4576973915100098, validation average accuracy : 0.26284247636795044
Epoch 2






































































epoch 2 - train average loss : 2.0573105812072754 - train accuracy : 0.39351922273635864 validation average loss : 2.0749282836914062, validation average accuracy : 0.38955479860305786
Epoch 3





































































epoch 3 - train average loss : 1.8867757320404053 - train accuracy : 0.44554248452186584 validation average loss : 1.9273444414138794, validation average accuracy : 0.4342587888240814
Epoch 4





































































epoch 4 - train average loss : 1.7781457901000977 - train accuracy : 0.47226372361183167 validation average loss : 1.8550466299057007, validation average accuracy : 0.4590875804424286
Epoch 5




































































epoch 5 - train average loss : 1.6860183477401733 - train accuracy : 0.49506375193595886 validation average loss : 1.8031014204025269, validation average accuracy : 0.46966731548309326
Epoch 6












step : 95/511, t_loss : 1.374557375907898, t_accuracy : 0.609375, v_loss : 2.085940361022949, v_accuracy : 0.40625555
Traceback (most recent call last):
  File "SampleCNN_main.py", line 158, in <module>
    wandb.log({'train_loss' : train_loss,  'train_accuracy': train_accuracy, 'validation_loss' : validation_loss, 'validation_accuracy' : validation_accuracy})
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 289, in wrapper
    return func(self, *args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 255, in wrapper
    return func(self, *args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 1591, in log
    self._log(data=data, step=step, commit=commit)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 1375, in _log
    self._partial_history_callback(data, step, commit)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 1259, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/interface/interface.py", line 548, in publish_partial_history
    item.value_json = json_dumps_safer_history(v)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 827, in json_dumps_safer_history
    return json.dumps(obj, cls=WandBHistoryJSONEncoder, **kwargs)
  File "/usr/lib/python3.8/json/__init__.py", line 234, in dumps
    return cls(
  File "/usr/lib/python3.8/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/lib/python3.8/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 790, in default
    obj, converted = json_friendly(obj)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 606, in json_friendly
    obj = get_jax_tensor(obj)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 482, in get_jax_tensor
    return jax.device_get(obj)
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/api.py", line 2928, in device_get
    return tree_map(_device_get, x)
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/tree_util.py", line 205, in tree_map
    return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/tree_util.py", line 205, in <genexpr>
    return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/api.py", line 2889, in _device_get
    return toarray()
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/device_array.py", line 265, in __array__
    return np.asarray(self._value, dtype=dtype)
KeyboardInterrupt
Traceback (most recent call last):
  File "SampleCNN_main.py", line 158, in <module>
    wandb.log({'train_loss' : train_loss,  'train_accuracy': train_accuracy, 'validation_loss' : validation_loss, 'validation_accuracy' : validation_accuracy})
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 289, in wrapper
    return func(self, *args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 255, in wrapper
    return func(self, *args, **kwargs)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 1591, in log
    self._log(data=data, step=step, commit=commit)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 1375, in _log
    self._partial_history_callback(data, step, commit)
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/wandb_run.py", line 1259, in _partial_history_callback
    self._backend.interface.publish_partial_history(
  File "/usr/local/lib/python3.8/dist-packages/wandb/sdk/interface/interface.py", line 548, in publish_partial_history
    item.value_json = json_dumps_safer_history(v)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 827, in json_dumps_safer_history
    return json.dumps(obj, cls=WandBHistoryJSONEncoder, **kwargs)
  File "/usr/lib/python3.8/json/__init__.py", line 234, in dumps
    return cls(
  File "/usr/lib/python3.8/json/encoder.py", line 199, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "/usr/lib/python3.8/json/encoder.py", line 257, in iterencode
    return _iterencode(o, 0)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 790, in default
    obj, converted = json_friendly(obj)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 606, in json_friendly
    obj = get_jax_tensor(obj)
  File "/usr/local/lib/python3.8/dist-packages/wandb/util.py", line 482, in get_jax_tensor
    return jax.device_get(obj)
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/api.py", line 2928, in device_get
    return tree_map(_device_get, x)
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/tree_util.py", line 205, in tree_map
    return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/tree_util.py", line 205, in <genexpr>
    return treedef.unflatten(f(*xs) for xs in zip(*all_leaves))
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/api.py", line 2889, in _device_get
    return toarray()
  File "/usr/local/lib/python3.8/dist-packages/jax/_src/device_array.py", line 265, in __array__
    return np.asarray(self._value, dtype=dtype)
KeyboardInterrupt